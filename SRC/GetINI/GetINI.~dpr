program GetINI;

{$APPTYPE CONSOLE}

{$R *.res}

uses
    Classes, SysUtils, IniFiles;

var
    GIniFileName : string;
    GINIFile : TINIFile;
    GSection : string;
    GParameter : string;
    GValue : string;
    GSections: TStringList;
    GParameters: TStringList;
    j: integer;
    i: integer;

procedure CheckParameter (const LParameter: string);
begin
    GValue := INIFile.ReadString(GSection, GParameter, '');
    WriteLN (GParameter+'='+GValue);
end;

procedure CheckSection (const LSection: string);
begin
    GParameters.Clear;
    GINIFile.ReadSection (LSection, GParameters);
    for i:=0 to GParameters.Count-1 do begin
        GParameter := Parameters.Strings[i];
        CheckParameter (GParameter);
    end;
end;

procedure CheckSections;
begin
    INIFile.ReadSections(Sections);
    for j:=0 to Sections.Count-1 do begin
        GSection := Sections.Strings[j];
        CheckSection (GSection);
    end;
end;

begin
    { ParamStr(1) - <>.ini  }
    { ParamStr(2) - <Section> }
    { ParamStr(3) - <parameter> }
    if not (ParamCount in [1..3]) then begin
        WriteLN('SETINI: setini <ini_file> <Section> <parameter>');
        end
    else begin
        GINIFileName := SysUtils.ExpandFileName(Paramstr(1));
        GSection := ParamStr(2);
        GParameter := ParamStr(3);

        if not FileExists(GINIFileName) then begin
            WriteLN ('GETINI: ini_file '+Paramstr(1)+' not found...');
            end
        else begin
            GINIFile := GTINIFile.Create(GINIFileName);
            Sections := TStringList.Create;
            Parameters := TStringList.Create;
            if GParameter <> '' then begin
                CheckParameter (GParameter);
                end
            else
            if GSection <> '' then begin
                CheckSection (GSection);
                end
            else begin
                CheckSections;
            end;
            GIniFile.Free;
            GParameters.Free;
            GSections.Free;
        end;
    end;
end.
